{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome...","text":"<p>If you've stumbled across this site it's probably because you've been looking for something ACI related, or you've seen one of my presentations from Cisco Live or some other event.</p> <p>I put this site together for a couple of reasons, firstly because I've put together so many best practices for different customers that I thought I should consolidate them in one place, and secondly (and probably more importantly) because I sometimes forget how I've done things :)</p>"},{"location":"#a-little-about-me","title":"A little about me...","text":"<p>I've been at Cisco for longer than I can remember, I guess the ability to change roles and do different things is what's kept me here at Cisco. I'm based in the UK and currently work as a Global Solutions Architect in Cisco's Data Center Networking team, prior to working in the Global team I've worked for both the EMEA and UK Systems Engineering teams.</p> <p>Outside of work I love to travel and go diving whenever I get the chance.</p> <p>According to my kids I draw pictures for a job, which is partially true .... I do love a diagram...!</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>By way of a disclaimer, the opinions expressed here are very much my personal thoughts and opinions. The content is not checked, approved, or in any way endorsed by Cisco.</p>"},{"location":"categories/aci/access-policies/","title":"Access Policy Configuration","text":"<p>Configuring interfaces on an ACI fabric can be very simple (if you know what you're doing), or a bit like driving a car, it can be challenging if you've never been taught properly. I've see many, many customers who have started off configuring things without a real plan in mind, and therein lies one of the most important things to remember when configuring ACI, and that is \"plan first, configure second\".</p> <p>Configuring an interface on an ACI Leaf switch is much like configuring an interface on a traditional switch, yes, there are a few other options that you wouldn't find on a traditional switch, and yes, to keep things interesting the developers decided to give objects some funny names, but once you get past that it's really quite simple.</p>"},{"location":"categories/aci/access-policies/#access-policy-building-blocks","title":"Access Policy Building Blocks","text":"<p>Before we get onto an actual example it's worth first understanding the building blocks that are ACI Access Policies - be prepared, there are quite a lot of them!</p> <p>Ok, the first thing to do is to navigate to \"Fabric &gt; Access Policies\", under the Access Policies you'll find a list of folders where you'll configure your parameters, and at the very top there is a Wizard that's been designed to help you through the configuration steps. </p> <p>I would strongly recommend that you never, ever, (ever) use the wizard...!! There a couple of reasons why I would say not to use the wizard, the first being if you use the wizard you will never really learn how to configure interfaces, and the second being that the wizard automatically creates all manner of weird names under the Access Policies.</p> <p>So what are all these policies?</p> <p>I'll start at the top and work down, I won't cover every policy else you'll be here forever. If your head starts hurting simply jump to the diagram and example below: </p> <ul> <li>Switches &gt; Leaf Switches &gt; Profiles: These profiles identify one or more physical switches. In our example a Leaf Switch Profile will map to a single switch</li> <li>Interfaces &gt; Leaf Interfaces &gt; Profiles: These are the logical representation of physical switches. In our example a Leaf Interface Profile will map 1:1 to a Leaf Switch Profile</li> <li>Interfaces &gt; Leaf Interfaces &gt; Profiles &gt; Access Port Selector: These are the actual interfaces on a given switch</li> <li>Interfaces &gt; Leaf Interfaces &gt; Policy Groups: These are a group of settings (an interface template) that will be applied to switch interfaces</li> <li>Policies &gt; Interfaces: These are the actual interface settings which are aggregated into an Interface Policy Group</li> <li>Policies &gt; Global &gt; AAEP: In a traditional switch this would be akin to \"switchport trunk allowed VLAN\" - VLANs are mapped to a Policy Group</li> <li>Domains (L2, L3, Physical, VMM): Domains define an environment where VLANs can be consumed. Think, these VLANs can only be used by this tenat</li> <li>Pools &gt; VLAN Pool: These are lists of one or more VLANs which can be allocated statically or dynamically</li> </ul> <p>Ok, if that's the theory, this is how our Access Policies desing would hang together if I were attaching some ESX hosts to my fabric using standard (non VPC interfaces):</p>"},{"location":"categories/aci/access-policies/#lets-build-this-out-step-by-step","title":"Let's build this out step by step...!","text":"<p>The best starting point (IMHO) is to always focus on the Policy Group / Interface Template (call it what you want - well, it's called a Policy Group), because this will be a template which you'll reuse multiple times to ensure that all the switch interfaces are configured in a consistent manner.</p> <p>To create an Interface Policy Group, navigate to Interfaces &gt; Leaf Interfaces &gt; Policy Groups. Once you're in the right place, create a new Policy Group with the name of the device that you're attaching to the network - in this case we're going to attach the default vSwitch-0 from our hosts, therefore we'll name the Policy Group \"esx-hosts-vSwitch-0\".</p> <p>When you create the Policy Group you'll quickly realise that you should have created some of the other objects before the Policy Group so that you could use them at this point. Not to worry, you can either create the objects at this point, or just save the empty policy group - we'll do the latter and just save the empty group.</p>"},{"location":"categories/aci/access-policies/#lets-start-again-at-the-bottom-and-work-our-way-up-the-object-model","title":"Let's start (again) at the bottom and work our way up the Object Model...!","text":"<p>We're going to keep our naming structure very (er) structured, everything will reflect the name of the Policy Group.</p> <p>We will create the following objects:</p> <ul> <li>A VLAN Pool that is type \"static\" with the VLANs that we want to use for our host connectivity on vSwitch-0</li> <li>A Physical Domain that could/would be used to control where the VLANs are used</li> <li>An AAEP that is going to \"switchport trunk\" allow the VLANs on an interface</li> <li>A number of Interface Policies which will define the characteristics of our interfaces e.g. cdp-enabled, mcp-enabled, port-local-vlans etc</li> </ul> <p>At each step we need to ensure that the relationship between our objects is in place, because if you have a break in the model the interface won't be configured correctly.</p>"},{"location":"categories/aci/access-policies/#now-lets-start-at-the-top-and-work-our-way-down-the-object-model","title":"Now let's start at the top and work our way down the Object Model...!","text":"<p>The next step will be to map our physical switches to the logical representation of our switches, in other words we will create a 1:1 mapping between our Leaf Switch Profile and our Leaf Interface Profile.</p> <p>To do this we will need to create the following objects:</p> <ul> <li>A Leaf Switch Profile this identifies a physical switch, i.e. leaf-101, leaf-102, etc</li> <li>A Leaf Interface Profile this will map our configured interfaces to our physical switches, i.e. leaf-101, leaf-102, etc</li> </ul>"},{"location":"categories/aci/access-policies/#lets-complete-the-object-model","title":"Let's complete the Object Model...!","text":"<p>The final thing we need to do is to select which interfaces we want to configure on a particular switch, to do this we will create the two remaining objects:</p> <ul> <li>An Access Port Selector is configured under the Leaf Interface Profile and is used to identify on or more interfaces that will be configured</li> <li>A Port Block is where you actually specify the interfaces that you want to configure i.e. eth1/1, eth 1/2, etc. You can add a unique interface description to each interface as you configure it, this will be displayed when you enter a \"show\" command on APIC such as <code>fabric 101 show interface status</code>, or directly on a leaf switch <code>show interface status</code></li> </ul>"},{"location":"categories/aci/access-policies/#that-seems-like-a-lot-of-steps-to-configure-an-interface","title":"That seems like a lot of steps to configure an interface...!","text":"<p>This is something that I've heard more than once, and it's true, there are a number of steps that need to be completed, and if we were only configuring a single interface on a single switch this would take some time. However, Data Centers come in all shapes and sizes, and there are always multiple switches - from a small Data Center of 10-20 switches, to a large Data Center with hundreds of switches. Whatever size Data Center you're building, the ability to have a consistent configuration across all your switches is critical.</p> <p>Once we've build out our Object Model for our vSwitch-0 configuration on our ESX hosts we can reuse the Policy Group across as many switches as there are in our Data Center, it's simply a case of creating an Access Port Selector with the required interfaces under the Leaf Interface Profile wherever you're attaching your hosts.</p>"},{"location":"categories/aci/access-policies/#summary","title":"Summary","text":"<p>Configuring interfaces on an ACI fabric is extremely flexible and scalable however (as hard as it is) you should really plan what you're going build before jumping in at the deep end and configuring things.</p>"},{"location":"categories/aci/getting-started/","title":"Getting started with ACI","text":"<p>How do I get started with ACI?</p> <p>If I've heard this question once, I've heard it many (many) times from both customers and partners, and as boring as it sounds you really need to have plan before you start configuring \"stuff\" on your fabric.</p> <p>Very broadly you need to have a plan in a few areas:</p> <ul> <li> <p>you'll need to consider how you are going to configure the interfaces on your switches, and by this I don't mean whether you're opting for lldp over cdp, what I mean is that you need to understand how interface configuration actually works, and how this will work at scale in your environment</p> </li> <li> <p>you'll need to consider how you are going to configure your tenants, and therefore how you're going to connect (via L2/L3) to the workloads that you're hosting on the fabric</p> </li> <li> <p>you'll need to consider how you are actually going to do the configuration - are you going to use the GUI, the CLI, or the API? There is no right or wrong option, most likely you'll start off using the GUI to configure things, and then you'll gravitate towards using the API, maybe with Postman, Ansible, Terraform, or Nexus as Code</p> </li> </ul> <p>Ok, so what will happen if you don't start out with a plan?</p> <p>Well much like anything else in life, whether you're configuring a standalone switch or router, or whether you're building a house, if you don't have some kind of a plan you'll most likely end up in a mess.</p> <p>As a best practice, I always strongly suggest that you download the APIC simulator so that you can test your configuration/code in a safe place, then test you configuration/code on a test network, and then (finally) when you're 100% happy, you put your configuration/code into production.</p>"},{"location":"categories/aci/route-leaking-epgs/","title":"Route Leaking with EPGs - (coming soon)","text":""},{"location":"categories/aci/route-leaking-esgs/","title":"Route Leaking with ESGs - (coming soon)","text":""},{"location":"categories/aci/tenant-building-blocks/","title":"Understanding ACI Building Blocks","text":"<p>Before jumping on the UI to start configuring your network it is worth taking a step back to consider the relationship between different objects that you'll be touching within your ACI tenants.</p> <p>I guess the first thing to do is to understand the building blocks and what they actually do:</p> <ul> <li>Tenant - a tenant is simply an administrative boundary, you can think of it like a VPC in AWS. It generally makes sense to align tenants around a customer's business functions, for example a bank may have a tenant for \"consumer finance\" and another tenant for \"commercial finance\", or they may acutally break those tenants into smaller administrative boundaries - \"consumer finance - production\", \"consumer finance - pre-production\", \"consumer finance - staging\" etc.</li> <li>VRF - a VRF is the same as a VRF on any other router, it routes internally and externally (L3out in ACI terminology), it can only live inside a single tenant. The VRF can operate it either enforced mode (default), or unenforced mode. When operating in the default enforced mode communication on the VRF is blocked and is only permitted though the use of Contracts (ACLs). Switching between enforced mode and unenforced mode is a disruptive operation.</li> <li>Bridge Domain - a Bridge Domain (BD) is a VXLAN segment that is associated with (mapped to) a single VRF. A BD may or may not have associated gateway(s) i.e. a Bridge Domain can be considered to be either Layer 2 or Layer 3. When you configure a gateway on a BD it dynamically creates an SVI on the VRF.</li> <li>Application Profile - an Application Profile is simply a folder in which to configure your security groups. The security groups are either VLAN based (EPGs) or IP/MAC based (ESGs).</li> <li>Endpoint Groups - An Endpoint Group (EPG) classifies/accepts traffic coming into a given switch/interface/VLAN for security purposes. Contracts can be applied to/between EPGs to allow communication.</li> <li>Endpoint Security Group - An Endpoint Security Group (ESG) classifies traffic within a VRF by MAC/IP/EPG/Tag for security purposes. Contracts can be applied to/between ESGs to allow communication. </li> </ul> <p>ACI is able to abstract the different building blocks to build extremely flexible (or confusing) network designs.</p>"},{"location":"categories/aci/tenant-building-blocks/#bridge-domains-and-epgs","title":"Bridge Domains and EPGs","text":"<p>A diagram always (hopefully) speaks a thousand words...!</p> <p>In the diagram below you'll see how the building blocks hang together. There is a Tenant (demo) with a VRF (vrf-01). The VRF has 5x Bridge Domains each with one or more associated EPGs. </p> <p>Now what I should point out is that most (the vast majority) of customers will deploy a single BD:EPG design, in other words a single Subnet:VLAN design - more on that below.</p> <ul> <li>BD: vlan-10 - this is a Layer 2 Bridge Domain which has a single EPG (vlan-10). <ul> <li>EPG: vlan-10 - this EPG is used for \"linux\" hosts and classifies/accepts traffic on VLAN10 on interface 101/1/1 and interface 102/1/1.</li> </ul> </li> <li>BD: 10.0.11.0_24 - this is a Layer 3 Bridge Domain with an SVI of 10.0.11.1/24, and a single EPG (vlan-sg-10). <ul> <li>EPG: vlan-sg-10 - this EPG is used for \"linux\" hosts and classifies/accepts traffic on VLAN10 on interface 101/1/1 and interface 102/1/1.</li> </ul> </li> <li>BD: 10.0.12.0_24 - this is a Layer 3 Bridge Domain with an SVI of 10.0.12.1/24, and it has two EPGS (vlan-sg-20 and vlan-sg-30) which are isolated from each other. <ul> <li>EPG: vlan-sg-20 - this EPG uses static switch/interface/vlan to match traffic.</li> <li>EPG: vlan-sg-30 - this EPG is mapped to a VMware VDS and is dynamically allocated a VLAN.</li> </ul> </li> <li>BD: 10.0.13-14_24 - this is a Layer 3 Bridge Domain with 2x SVIs, 10.0.13.1/24 and 10.0.14.1/24. One SVI will be automatically defined as Primary, and the other SVI will be automatically defined as secondary. Now here's something to melt your mind...!! <ul> <li>EPG: vlan-sg-40 - endpoints will be mapped to vlan-sg-40 irrespective of whether they're on the 10.0.13.0 subnet or the 10.0.14.0 subnet provided that they match VLAN13 on 101/1/1 or VLAN14 on 102/1/1 i.e. it is entirely possible to map endpoints from different subnets (on the same BD) to the same security group. </li> <li>EPG: vlan-sg-50 - this EPG is mapped to a VMware VDS and is dynamically allocated a VLAN.</li> </ul> </li> <li>BD: 10.0.15-16_24 - this is a Layer 3 Bridge Domain with 2x SVIs, 10.0.15.1/24 and 10.0.16.1/24. <ul> <li>EPG: vlan-sg-60 - this EPG is the same as the previous example, endpoints can be attached to VLAN15 or VLAN16, and they can be on the 10.0.15.0/24 subnet and/or the 10.0.16.0/24 subnet. </li> <li>EPG: vlan-sg-70 - this EPG classifies endpoints from VLAN17 or VLAN18 irrespective of whether they're on the 10.0.15.0 subnet or the 10.0.16.0 subnet, plus it classifies endpoints from the VLAN which is dynamically allocated to the VMware VDS.</li> </ul> </li> </ul>"},{"location":"categories/aci/tenant-building-blocks/#which-is-the-best-option","title":"Which is the best option...?","text":"<p>Generally speaking most customers create a single BD/EPG relationship, the reason for this design choice is twofold:</p> <ol> <li>It's simple to understand as in a traditional network you always have a single VLAN/SVI realtionship, and whilst it's true that you can configure secondary SVIs, it quite rare to see that type of configuration outside of migration scenarios.</li> <li>When you're migrating from a legacy network to ACI you'll have a single VLAN/SVI in the legacy world that you'll want to bring onto ACI.</li> </ol> <p>Keeping things simple makes it easy to troubleshoot!</p>"},{"location":"categories/aci/tenant-building-blocks/#bridge-domains-and-esgs","title":"Bridge Domains and ESGs","text":"<p>The fundamental difference between between EPGs and ESGs is that ESG operate across Bridge Domains in a VRF.</p> <p>So what does this mean? </p> <p>Quite simply it means that you can build security groups irrespective of which BD/subnet an endpoint is attached to. </p> <p>Consider a scenario with a banking customer where you have a VRF with a number of Bridge Domains (subnets), each Bridge Domain has a single EPG - a simple, traditional design. The VRF subnets are not dedicated to specific business functions, and as such the subnets are shared between \"consumer finance\" and \"commerical finance\". </p> <p>The customer has a requirement to ringfence their workloads, using ESGs you can easily classify endpoints into two different ESGs giving you visibility and (optionally) security of the workloads.</p>"},{"location":"categories/aci/tenant-common/","title":"Working with tenant common","text":"<p>The first thing to say about tenant common (rather than the \"common tenant\") is that objects which are created in tenant common can be used as a resource by any other (user) tenants. Typical examples of this would be when a \"user\" tenant contains EPGs and uses a Bridge Domain (and VRF) in tenant common. Another example would be when Contracts are defined in tenant common and consumed as resources in other (user) tenants.</p> <p>You can think of it that tenant common is \"above\" other teants as shown below.</p>"},{"location":"categories/aci/tenant-common/#security-considerations","title":"Security considerations","text":"<p>An important security consideration with tenant common is that it is extremely easy to map objects in \"user\" tenants to resources in tenant common by mistake. </p> <p>To explain why this could happen, lets take an example configuration from our tenant <code>demo-01</code>.</p> <p>Inside tenant <code>demo-01</code> there is  a single VRF <code>vrf-01</code>, attached to the VRF are various Bridge Domains with their associated SVIs. The VRF in tenant <code>demo:01</code> would be referred to as <code>demo-01:vrf-01</code>.</p> <p>If there is a VRF in tenant common with the same name (<code>vrf-01</code>) it would be relatively easy to attach a Bridge Domain in the \"user\" tenant to <code>vrf-01</code> in tenant common by mistake using the GUI. </p> <p>Whilst making GUI errors can be avoided there is a bigger security concern around the naming of objects. If <code>demo-01:vrf-01</code> was deleted all the objects referencing <code>vrf-01</code> would automatically bind to <code>common:vrf-01</code> as the binding of objects uses the object name not the object dn.</p>"},{"location":"categories/aci/tenant-common/#looking-at-the-code","title":"Looking at the code","text":"<p>In the first block of code (fvBD) the distinguished name, or the path to the Bridge Domain is <code>uni/tn-demo/BD-10.192.168.150.0_24</code>. The APIC controller is explicitly told how to find and map the Bridge Domain.</p> <p>The second block of code (fvSubnet) is a child of fvBD and its attributes include the Default Gateway  (<code>192.168.150.1/24</code>), and a flag (<code>scope</code>) to control whether the subnet is advertised or not.</p> <p>The third block of code (fvRsCtx) is another child of fvBD and it defines which VRF (<code>tnFvCtxName</code>) the Bridge Domain should be bound to. The APIC controller is told to bind to vrf-01, however critically there is no reference as to the path to vrf-01, i.e. the VRF is referenced by its actual name, and not its distinguished name.</p> VRF resolution<pre><code>\"fvBD\": {\n    \"attributes\": {\n        \"arpFlood\": \"yes\",\n        \"descr\": \"\",\n        \"dn\": \"uni/tn-demo/BD-10.192.168.150.0_24\",\n        \"limitIpLearnToSubnets\": \"yes\",\n        \"mac\": \"00:22:BD:F8:19:FF\",\n        \"mcastARPDrop\": \"yes\",\n        \"mcastAllow\": \"no\",\n        \"multiDstPktAct\": \"bd-flood\",\n        \"name\": \"192.168.150.0_24\",\n        \"unicastRoute\": \"yes\",\n        \"unkMacUcastAct\": \"proxy\",\n        \"unkMcastAct\": \"flood\",\n        \"userdom\": \":all:mgmt:common:\"\n    },\n    \"children\": [\n        {\n            \"fvSubnet\": {\n                \"attributes\": {\n                    \"descr\": \"\",\n                    \"ip\": \"192.168.150.1/24\",\n                    \"ipDPLearning\": \"enabled\",\n                    \"preferred\": \"no\",\n                    \"scope\": \"private\",\n                    \"userdom\": \":all:mgmt:common:\"\n                }\n            }\n        },\n        {\n            \"fvRsCtx\": {\n                \"attributes\": {\n                    \"tnFvCtxName\": \"vrf-01\",\n                    \"userdom\": \"all\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"categories/aci/tenant-common/#recommendation","title":"Recommendation","text":"<p>A general recommendation would be to prefix objects in tenant common to prevent unexpected binding of resources:</p> object name vrf: common.vrf-01 bd: common.vrf-01_10.237.100.0_24 l3out: common.vrf-01-ospf-area-0.0.0.1 contract: common.permit-tcp-src-any-dst-80 filter: common.tcp-src-any-dst-80 policy: common.dhcp-server device: common.ftd-01"},{"location":"categories/aci/tenant-design-options/","title":"Designing your tenants (draft)","text":"<p>Before exploring different tenant design options it would be worth taking a few minutes to review the securiy considerations when using tenant common. Aside from the security considerations ACI administrators should also consider prexfixing any object in tenant common with the \"common.\" prefix so that they unique names on the fabric.</p> <p>It is also worth understaning the security considerations when using vzAny as vzAny always includes the extEPG.</p>"},{"location":"categories/aci/tenant-design-options/#option-1-all-resources-in-tenant-common","title":"Option 1 - All resources in tenant common","text":"<p>                     Option 1 uses the default tenant \"common\" for all objects. Whilst it is a valid design option it isn't something you'd typically see outside of a lab environment, and even then you still probably wouldn't (shouldn't) actually see it used in this way.                 </p> <p>                     Tenant common should really only be used as a place to create shared objects (VRFs, BDs, Policies, Contracts, L3outs etc) so that they can be used by other tenants. You should always consider the potential security considerations when using tenant common.                 </p>"},{"location":"categories/aci/tenant-design-options/#option-2-shared-vrf-shared-bridge-domains","title":"Option 2 - Shared VRF, shared Bridge Domains","text":"<p>                     Option 2 allows you to share VRFs and Bridge Domains across different Tenants.                 </p> <p>                     This design is often seen in migration scenarios when customers are migrating from their legacy infrastructure onto an ACI fabric, and they wish to place workloads into different tenants for admin purposes without changing the IP addresses of the workloads.                 </p> <p>                     For example, a customer might have both production and pre-production workloads on the same subnets in their existing environment, as they migrate to ACI they can split the production and pre-production workloads into different admin domains/tenants.                 </p>"},{"location":"categories/aci/tenant-design-options/#option-3-shared-vrf-dedicated-bridge-domains","title":"Option 3 - Shared VRF, dedicated Bridge Domains","text":"<p>                     Option 3 allows you to have shared VRFs however the Bridge Domains (subnets) are dedicated to each Tenant.                 </p> <p>                     This design is often seen when a customer wants to dedicate specific Bridge Domains (subnets) to specific tenants on the ACI fabric.                 </p> <p>                     For example, a customer might have production and pre-production subnets in dedicated VRFs in their existing environment, as they migrate to ACI they can maintain their dedicated subnets by placing the Bridge Domains into the tenants, however the can simplify and reduce the number of VRFs they manage by using a shared VRF in tenant common.                 </p>"},{"location":"categories/aci/tenant-design-options/#option-4-all-resources-in-user-tenant","title":"Option 4 - All resources in \"user\" tenant","text":"<p>                     Option 4 places all the objects into dedicated Tenants.                 </p> <p>                     A customer might have one Tenant, or they might have 50x Tenants - it entirely comes down to how many different administrative domains a customer wants to have. There's no right or wrong answer provided that you stay within the scale guides.                 </p>"},{"location":"categories/aci/tenant-design-options/#option-5-shared-services-model","title":"Option 5 - Shared services model","text":"<p>                     Option 5 is by far my favourite design, it uses a \"shared-services\" tenant for North/South routing, and it uses dedicted Tenants for workloads.                 </p> <p>                     Ok, I guess the first thing to address is why should you use a dedicated \"shared-services\" tenant rather than tenant common?                 </p> <p>                     The answer should already be obvious if you've read the securiy considerations when using tenant common. Any object that is created in tenant common can be used/consumed by other tenants, therefore you could have a potential security issue as a L3Out in tenant common can be implicitedly used by any other tenant, or a contract configured in tenant common could be used/consumed by anu other tenant.                 </p> <p>                     If (on the other hand) you create a dedicated \"shared-services\" tenant you have to explcitedly allow connectivity to/from the \"shared-services\" tenant through route leaking and the exporting of contracts.                 </p>"},{"location":"categories/aci/tenant-design-options/#option-6-shared-services-model-with-shared-bridge-domains","title":"Option 6 - Shared services model with shared Bridge Domains","text":"<p>                     Option 6 simply combines all the options that we've looked at previously. There is a dedicated tenant for \"shared-services\" with shared VRFs and Bridge Domains in tenant common.                 </p> <p>                     You might well be thinking .... just why?                 </p> <p>                     I put this design together for a large bank who were concerned about security (hence we used a \"shared-services\" design), however they were convinced that they might have the requirement to move workloads between different tenants without changing the workload IP addresses.                 </p> <p>                     I did point out there are solutions such a DNS to overcome changing IP addresses, however they inisisted that this wasn't an option, hence this design template.                 </p>"},{"location":"categories/aci/vzAny/","title":"Working with vzAny","text":"<p>What actually is vzAny?</p> <p>In a nutshell vzAny is simply an EPG, but it's an EPG with a crucial difference - and that is that any contract which is applied to vzAny is applied to all EPGs, ESGs, and extEPGs within a given VRF.</p> <p>To put it another way, when vzAny provides a contract it means that all EPGs, ESGs, and extEPGs are providers of the same contract. When vzAny consuumes a contract it means that all EPGs, ESGs, and extEPGs are consumers of the same contract.</p> <p>It's also worth knowing that vzAny uses a pcTag/Class ID of zero (you can see this in the zoning rules), and it cannot be a contract provider in a shared services design.</p>"},{"location":"categories/aci/vzAny/#a-sledgehammer-to-crack-a-nut","title":"A sledgehammer to crack a nut","text":"<p>vzAny is often used to enable open communication within a VRF by providing and consuming the default contract from tenant common. This is an absolutely acceptable design, however it does open a potential security hole as vzAny will also apply to any external EPGs.</p>"},{"location":"categories/aci/vzAny/#vzany-in-a-single-tenant","title":"vzAny in a single tenant","text":"<p>If you provide and consume the default (permit-any) contract on vzAny it will permit all traffic between all EPGs, ESGs, and extEPGs within the VRF as shown below. </p> <p>The potential issue is that, depending on the subnet scope on the external EPG, you will have also allowed traffic from any remote subnet to any workload on the fabric which may or may not be the intended outcome.</p>"},{"location":"categories/aci/vzAny/#vzany-in-a-single-tenant-with-insideoutside-vrfs","title":"vzAny in a single tenant with inside/outside VRFs","text":"<p>To mitigate the potential security risk of opening connectivity to all workloads on the VRF you could simply create 2x VRFs, one that is external facing, and one that is internal facing. Each tenant would have their own dedicated L3out and you would simply need to enable route leaking between the external and internal VRFs, and apply contracts from extEPGs to any internal EPGs/ESGs.</p>"},{"location":"categories/aci/vzAny/#vzany-in-a-shared-services-model-with-split-tenants-and-vrfs","title":"vzAny in a shared services model with split tenants and VRFs","text":"<p>The final (and my preferred) option to mitigate the security risk that vzAny could pose is to create a Shared L3Out in a dedicated shared-services tenant. The shared L3out would provide inbound/outbound routing for all tenants on the fabric, and just like the previous example, you would need to enable route leaking between the external shared-services VRF, and the internal tenant VRF.</p> <p>You will still need to apply contracts from the extEPGs in the shared services tenant to the required EPGs/ESGs in the \"user\" tenant, however what is slightly different in a shared services design is that contracts either need to be provisioned in tenant common, or (and once again, my preferred option) the contract should be created in the provider tenant and exported to the consumer tenant where the contract is consumed as a contract interface.</p>"},{"location":"categories/aci/vzAny/#summary","title":"Summary","text":"<p>The really great thing about vzAny is that it allows you to easily open up communication within a VRF. On the other hand, the really bad thing about vzAny is that it opens up communication within a VRF which might present a potential security risk.</p> <p>I like to use vzAny to provide access to shared resources that need to be accessed by all endpoints in a VRF. For example if you have an EPG/ESG which provides your core services you could create a contract <code>permit-to-core-services</code> which is provided by your core services EPG/ESG and consumed by vzAny.</p> <p>With the contract in place all EPGs/ESGs within the VRF also inplicitedly become consumers of the core services EPG.</p> <p>I typically avoid placing services in tenant common unless I've got a really (really) good reason for putting something in tenant common - have a look at working with tenant common for more details.</p>"},{"location":"categories/networking/route-leaking/","title":"Route leaking between OSPF and BGP","text":"<p>I had a customer request which was to configure a couple of ACI tenants, each with a L3out for external peering (no route leaking between tenants/VRFs). They wanted one L3out to run OSPF and one L3out to run BGP - a pretty straightforward setup.</p> <p>I already had a \"shared-services\" tenant in my lab with a L3out running OSPF, so I added an SVI to the L3out which I used to connect to my external router - in this case my external router was a csr1kv. </p> <p>I then created another tenant with a L3out running BGP to the same csr1kv.</p> ACI and OSPF areas <p>When configuring a L3out for OSPF on ACI, you must put all the interfaces of the same OSPF process under the same L3out. </p> <p>In other words, you cannot have 2x L3outs on the same VRF running OSPF for the same area.</p> <p>The customer also had a secondary requirement which was to use dedicated VRFs on the external router to keep the tenant traffic completely isolated - more on this below.</p> <p>These are the basic configuration steps that I put together to peer a csr1kv to ACI such that the csr1kv provides routing between the \"shared-services\" tenant running OSPF and the demo tenant running BGP.</p> <p>The steps below focus only on the csr1kv configuration.</p>"},{"location":"categories/networking/route-leaking/#part-1-basic-configuration","title":"Part 1 - Basic configuration","text":"<p>I added a dedicated management VRF on the csr1kv just so that I didn't cut my legs off when playing with different configuration options.</p> <code>Management VRF</code> <pre><code>vrf definition management\n\naddress-family ipv4\nexit-address-family\n\ninterface GigabitEthernet1\nvrf forwarding management\nip address 10.237.100.127 255.255.255.0\nnegotiation auto\nno mop enabled\nno mop sysid\n\nip route vrf management 0.0.0.0 0.0.0.0 10.237.100.1\n</code></pre> <p>I then configured OSPF on the csr1kv to peer with my upstream routers</p> <p>In this case the upstream routers are my ACI Border Leafs and I'm peering OSPF with a L3out SVI in my shared-services tenant (<code>shared-services:vrf-01</code>).</p> <code>OSPF Configuration</code> <pre><code>interface GigabitEthernet2\nip address 10.237.99.52 255.255.255.248\nnegotiation auto\nno mop enabled\nno mop sysid\n\nrouter ospf 1\nnetwork 10.237.99.48 0.0.0.7 area 0.0.0.1\n</code></pre> <p>At this point my OSPF neighbours were up and working and I was receiving routes.</p> <code>OSPF up and running</code> <pre><code>csr1kv-02#show ip ospf neighbor\n\nNeighbor ID     Pri   State           Dead Time   Address         Interface\n101.2.1.1         1   FULL/BDR        00:00:34    10.237.99.49    GigabitEthernet2\n102.2.1.1         1   FULL/DR         00:00:33    10.237.99.50    GigabitEthernet2\n\ncsr1kv-02#sh ip route ospf\n\n&lt;output truncated&gt;\n\nGateway of last resort is 10.237.99.50 to network 0.0.0.0\n\nO*E2    0.0.0.0/0   [110/1] via 10.237.99.50, 21:44:43, GigabitEthernet2\n                    [110/1] via 10.237.99.49, 21:44:43, GigabitEthernet2\n        10.0.0.0/8 is variably subnetted, 78 subnets, 9 masks\nO E2    10.0.1.0/24 [110/20] via 10.237.99.50, 21:44:43, GigabitEthernet2\n                    [110/20] via 10.237.99.49, 21:44:43, GigabitEthernet2\nO E2    10.0.2.0/24 [110/20] via 10.237.99.50, 21:44:43, GigabitEthernet2\n                    [110/20] via 10.237.99.49, 21:44:43, GigabitEthernet2\nO E2    10.0.3.0/24 [110/20] via 10.237.99.50, 21:44:43, GigabitEthernet2\n                    [110/20] via 10.237.99.49, 21:44:43, GigabitEthernet2\nO E2    10.0.4.0/24 [110/20] via 10.237.99.50, 21:44:43, GigabitEthernet2\n\n&lt;output truncated&gt;\n</code></pre> <p>The next thing to configure was BGP peering from the csr1kv to the L3out SVI in my demo tenant (<code>demo:vrf-01</code>).</p> <code>BGP Configuration</code> <pre><code>interface GigabitEthernet6\nip address 10.237.99.84 255.255.255.248\nnegotiation auto\nno mop enabled\nno mop sysid\n\nrouter bgp 65051\nbgp log-neighbor-changes\nneighbor 10.237.99.81 remote-as 65151\nneighbor 10.237.99.82 remote-as 65151\n\naddress-family ipv4\nnetwork 0.0.0.0\nneighbor 10.237.99.81 activate\nneighbor 10.237.99.82 activate\nexit-address-family\n</code></pre> <p>At this point my BGP neighbours were up and working and I was receiving routes.</p> <code>BGP up and running</code> <pre><code>csr1kv-02#show ip bgp summary\nBGP router identifier 10.237.99.84, local AS number 65051\nBGP table version is 11, main routing table version 11\n8 network entries using 1984 bytes of memory\n15 path entries using 2040 bytes of memory\n2/2 BGP path/bestpath attribute entries using 576 bytes of memory\n1 BGP AS-PATH entries using 40 bytes of memory\n0 BGP route-map cache entries using 0 bytes of memory\n0 BGP filter-list cache entries using 0 bytes of memory\nBGP using 4640 total bytes of memory\nBGP activity 9/1 prefixes, 16/1 paths, scan interval 60 secs\n8 networks peaked at 15:48:22 Mar 14 2024 UTC (00:25:48.160 ago)\n\nNeighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd\n10.237.99.81    4        65151      77      70       11    0    0 00:56:00        7\n10.237.99.82    4        65151      76      69       11    0    0 00:55:44        7\n\ncsr1kv-02#show ip route bgp\n\n&lt;output truncated&gt;\n\nGateway of last resort is 10.237.99.50 to network 0.0.0.0\n\nB        10.0.1.0/24 [20/0] via 10.237.99.81, 00:31:01\nB        10.0.2.0/24 [20/0] via 10.237.99.81, 00:31:01\nB        10.0.3.0/24 [20/0] via 10.237.99.81, 00:31:01\nB        10.0.4.0/24 [20/0] via 10.237.99.81, 00:31:01\nB        10.0.5.0/24 [20/0] via 10.237.99.81, 00:31:01\nB        10.0.6.0/24 [20/0] via 10.237.99.81, 00:31:01\nB        10.0.7.0/24 [20/0] via 10.237.99.81, 00:31:01\n\n&lt;output truncated&gt;\n</code></pre> <p>Finally, I redistributed my OSPF routes into BGP and my BGP routes into OSPF.</p> <code>Route redistribution</code> <pre><code>router ospf 1\nredistribute bgp 65051\n\nrouter bgp 65051\naddress-family ipv4\nredistribute ospf 1 match external 2\n</code></pre> <p>I was now able to see routes in the VRF on my ACI fabric:</p> <code>Routes learned on ACI</code> <pre><code>aci-dev-01-apic-01# fabric 101-102 show ip route vrf demo:vrf-01\n----------------------------------------------------------------\nNode 101 (aci-dev-01-leaf-101)\n----------------------------------------------------------------\nIP Route Table for VRF \"demo:vrf-01\"\n'*' denotes best ucast next-hop\n'**' denotes best mcast next-hop\n'[x/y]' denotes [preference/metric]\n'%&lt;string&gt;' in via output denotes VRF &lt;string&gt;\n\n0.0.0.0/0, ubest/mbest: 1/0\n    *via 10.237.99.234%shared-services:vrf-01, eth1/7, [20/1], 3d00h, bgp-65001, external, tag 65001, rwVnid: vxlan-2129920\n10.0.1.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d00h, static\n10.0.1.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.1.1, vlan44, [0/0], 3d00h, local, local\n10.0.2.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d00h, static\n10.0.2.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.2.1, vlan51, [0/0], 3d00h, local, local\n10.0.3.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d00h, static\n10.0.3.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.3.1, vlan38, [0/0], 3d00h, local, local\n10.0.4.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d00h, static\n10.0.4.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.4.1, vlan42, [0/0], 3d00h, local, local\n10.0.5.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d00h, static\n10.0.5.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.5.1, vlan48, [0/0], 3d00h, local, local\n10.0.6.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d00h, static\n10.0.6.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.6.1, vlan35, [0/0], 3d00h, local, local\n10.0.7.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d00h, static\n10.0.7.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.7.1, vlan40, [0/0], 3d00h, local, local\n10.0.11.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.12.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.13.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.14.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.51.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.52.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.61.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.62.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.71.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.72.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.73.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/20], 00:21:49, bgp-65001, external, tag 65151\n10.0.81.0/24, ubest/mbest: 1/0\n</code></pre>"},{"location":"categories/networking/route-leaking/#part-2-tenant-specific-vrfs","title":"Part 2 - Tenant specific VRFs","text":"<p>With everything working as expected in the Global VRF the next step was to create a couple of VRFs on my external csr1kv.</p> <p>I added a \"shared-services\" VRF to peer upstream to my shared-services VRF on ACI (<code>shared-services:vrf-01</code>), and I added a \"demo\" to peer downstream to my demo VRF on ACI (<code>demo:vrf-01</code>).</p> <code>Create new VRFs and import/export routes</code> <pre><code>vrf definition tn-shared-services\nrd 65000:100\nroute-target export 65000:100\nroute-target import 65000:100\nroute-target import 65000:0\n\naddress-family ipv4\nexit-address-family\n\nvrf definition tn-demo\nrd 65000:0\nroute-target export 65000:0\nroute-target import 65000:0\nroute-target import 65000:100\n!\naddress-family ipv4\nexit-address-family\n</code></pre> <p>I then added the interfaces to the respective VRFs.</p> <code>Add the interfaces to the respective VRFs</code> <pre><code>interface GigabitEthernet2\nvrf forwarding tn-shared-services\nip address 10.237.99.52 255.255.255.248\nnegotiation auto\nno mop enabled\nno mop sysid\n\ninterface GigabitEthernet6\nvrf forwarding tn-demo\nip address 10.237.99.84 255.255.255.248\nnegotiation auto\nno mop enabled\nno mop sysid\n</code></pre> <p>Finally I configured the routing protocols.</p> <code>Configure the routing protocols</code> <pre><code>router ospf 1 vrf tn-shared-services\ncapability vrf-lite\nredistribute bgp 65051\nnetwork 10.237.99.48 0.0.0.7 area 0.0.0.1\n\nrouter bgp 65051\nbgp log-neighbor-changes\n\naddress-family ipv4 vrf tn-shared-services\nnetwork 0.0.0.0\nredistribute connected\nredistribute ospf 1 match internal external 2\nexit-address-family\n\naddress-family ipv4 vrf tn-demo\nnetwork 10.237.99.80 mask 255.255.255.248\nneighbor 10.237.99.81 remote-as 65151\nneighbor 10.237.99.81 activate\nneighbor 10.237.99.82 remote-as 65151\nneighbor 10.237.99.82 activate\nexit-address-family\n</code></pre> Redistributing a default route <p>If a default route has been learned as an external route from OSPF it will not be redistributed into BGP using <code>redistribute ospf 1 match external 2</code>. </p> <p>To advertise the default route I had to add the <code>network 0.0.0.0</code> to my tn-shared-services VRF.</p> <p>Another way to advertise a default route would have been to use <code>default-information originate</code>. </p> <p>This would always create a default route and advertise it via BGP to neighbours specified with <code>neighbor x.x.x.x default-originate</code>.</p> <p>I was now able to see routes in the VRF on my ACI fabric:</p> <code>Routes learned on ACI</code> <pre><code>aci-dev-01-apic-01# fabric 101-102 show ip route vrf demo:vrf-01\n----------------------------------------------------------------\nNode 101 (aci-dev-01-leaf-101)\n----------------------------------------------------------------\nIP Route Table for VRF \"demo:vrf-01\"\n'*' denotes best ucast next-hop\n'**' denotes best mcast next-hop\n'[x/y]' denotes [preference/metric]\n'%&lt;string&gt;' in via output denotes VRF &lt;string&gt;\n\n0.0.0.0/0, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:11:04, bgp-65001, external, tag 65151\n10.0.1.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d02h, static\n10.0.1.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.1.1, vlan44, [0/0], 3d02h, local, local\n10.0.2.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d02h, static\n10.0.2.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.2.1, vlan51, [0/0], 3d02h, local, local\n10.0.3.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d02h, static\n10.0.3.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.3.1, vlan38, [0/0], 3d02h, local, local\n10.0.4.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d02h, static\n10.0.4.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.4.1, vlan42, [0/0], 3d02h, local, local\n10.0.5.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d02h, static\n10.0.5.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.5.1, vlan48, [0/0], 3d02h, local, local\n10.0.6.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d02h, static\n10.0.6.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.6.1, vlan35, [0/0], 3d02h, local, local\n10.0.7.0/24, ubest/mbest: 1/0, attached, direct, pervasive\n    *via 10.1.176.66%overlay-1, [1/0], 3d02h, static\n10.0.7.1/32, ubest/mbest: 1/0, attached, pervasive\n    *via 10.0.7.1, vlan40, [0/0], 3d02h, local, local\n10.0.11.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:32:30, bgp-65001, external, tag 65151\n10.0.12.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:32:30, bgp-65001, external, tag 65151\n10.0.13.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:32:30, bgp-65001, external, tag 65151\n10.0.14.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:32:30, bgp-65001, external, tag 65151\n10.0.71.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:32:30, bgp-65001, external, tag 65151\n10.0.72.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:32:30, bgp-65001, external, tag 65151\n10.0.73.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:32:30, bgp-65001, external, tag 65151\n10.0.81.0/24, ubest/mbest: 1/0\n    *via 10.237.99.84%demo:vrf-01, [20/0], 00:32:30, bgp-65001, external, tag 65151\n</code></pre>"},{"location":"categories/networking/route-leaking/#part-3-aci-configuration-with-nac","title":"Part 3 - ACI configuration with NAC","text":"<p>I used NAC to automate the ACI configuration so that I didn't spend my time configuring things manually on the GUI.</p> <p>Below is just a dump of the NAC configuration.</p> <code>ACI configuration</code> <pre><code>---\napic:\ntenants:\n    - name: demo\n    description: Routable IP range 10.0.1-7.x\n\n    policies:\n        dhcp_relay_policies:\n        - name: dhcp.uktme.cisco.com\n            description: \"dhcp.uktme.cisco.com\"\n            providers:\n            - ip: 10.237.97.133\n                type: external_epg\n                tenant: demo\n                l3out: demo.vrf-01-bgp-AS-65151\n                external_endpoint_group: all-external-subnets\n\n    filters:\n        - name: 'icmp'\n        entries:\n            - name: 'icmp'\n            protocol: icmp\n\n        - name: 'permit-src-any-dst-any'\n        entries:\n            - name: 'permit-src-any-dst-any'\n            ethertype: unspecified\n\n    contracts:\n        - name: intra-tenant\n        description: vzAny is contract Consumer and Provider\n        scope: context\n        subjects:\n            - name: permit-src-any-dst-any\n            filters: \n                - filter: permit-src-any-dst-any\n\n        - name: permit-to-vzAny\n        description: vzAny is contract Provider\n        scope: tenant\n        subjects:\n            - name: permit-src-any-dst-any\n            filters:\n                - filter: permit-src-any-dst-any\n\n    vrfs:\n        - name: vrf-01\n        description: configured with NAC\n        # alias: internal-vrf-01\n\n        contracts:\n            providers:\n            - permit-to-vzAny\n            # consumers:\n\n    l3outs:\n        - name: demo.vrf-01-bgp-AS-65151\n        description: configured with NAC\n        # alias: external-vrf\n        vrf: vrf-01\n        domain: demo.vrf-01\n\n        node_profiles:\n            - name: border-leafs\n            nodes:\n                - node_id: 101\n                router_id: 101.2.0.1\n                - node_id: 102\n                router_id: 102.2.0.1\n\n            interface_profiles:\n                - name: hx-dev-01-fi-a-vlan-34\n                interfaces:\n                    - node_id: 101\n                    channel: hx-dev-01-fi-a\n                    vlan: 34\n                    svi: true\n                    ip: 10.237.99.81/29\n                    mtu: 1500\n                    bgp_peers:\n                        - ip: 10.237.99.84/29\n                        remote_as: 65051\n                        local_as: 65151\n                        allow_self_as: false\n                        as_override: false\n                        disable_peer_as_check: false\n                        next_hop_self: false\n                        send_community: false\n                        send_ext_community: false\n                        allowed_self_as_count: 3\n                        bfd: false\n                        disable_connected_check: false\n                        ttl: 1\n                        remove_all_private_as: false\n                        remove_private_as: false\n                        replace_private_as_with_local_as: false\n                        unicast_address_family: true\n                        multicast_address_family: true\n                        admin_state: true\n                        as_propagate: none\n\n                - name: hx-dev-01-fi-b-vlan-34\n                interfaces:\n                    - node_id: 102\n                    channel: hx-dev-01-fi-b\n                    vlan: 34\n                    svi: true\n                    ip: 10.237.99.82/29\n                    mtu: 1500                      \n                    bgp_peers:\n                        - ip: 10.237.99.84/29\n                        remote_as: 65051\n                        local_as: 65151\n                        allow_self_as: false\n                        as_override: false\n                        disable_peer_as_check: false\n                        next_hop_self: false\n                        send_community: false\n                        send_ext_community: false\n                        allowed_self_as_count: 3\n                        bfd: false\n                        disable_connected_check: false\n                        ttl: 1\n                        remove_all_private_as: false\n                        remove_private_as: false\n                        replace_private_as_with_local_as: false\n                        unicast_address_family: true\n                        multicast_address_family: true\n                        admin_state: true\n                        as_propagate: none\n\n        external_endpoint_groups:\n            - name: all-external-subnets\n            subnets:\n                - prefix: 0.0.0.0/0\n                shared_route_control: false\n                import_security: true\n\n            contracts:\n                consumers:\n                - permit-to-vzAny\n\n    bridge_domains:\n        # - name: 6.6.6.0_24\n        #   description: PBR subnet\n        #   # alias: internal-vrf-01\n        #   unknown_unicast: proxy\n        #   vrf: vrf-01\n        #   subnets:\n        #     - ip: 6.6.6.1/24\n        #       public: false\n        #       private: true\n        #       shared: false\n        #       nd_ra_prefix: false\n\n        - name: 10.0.1.0_24\n        # alias: internal-vrf-01\n        unknown_unicast: proxy\n        vrf: vrf-01\n        subnets:\n            - ip: 10.0.1.1/24\n            public: true\n            # private: false\n            shared: false\n            nd_ra_prefix: false\n        l3outs:\n            - demo.vrf-01-bgp-AS-65151\n        dhcp_labels:\n            - dhcp_relay_policy: dhcp.uktme.cisco.com\n\n        - name: 10.0.2.0_24\n        # alias: internal-vrf-01\n        unknown_unicast: proxy\n        vrf: vrf-01\n        subnets:\n            - ip: 10.0.2.1/24\n            public: true\n            # private: false\n            shared: false\n            nd_ra_prefix: false\n        l3outs:\n            - demo.vrf-01-bgp-AS-65151\n        dhcp_labels:\n            - dhcp_relay_policy: dhcp.uktme.cisco.com\n\n        - name: 10.0.3.0_24\n        # alias: internal-vrf-01\n        unknown_unicast: proxy\n        vrf: vrf-01\n        subnets:\n            - ip: 10.0.3.1/24\n            public: true\n            # private: false\n            shared: false\n            nd_ra_prefix: false\n        l3outs:\n            - demo.vrf-01-bgp-AS-65151\n        dhcp_labels:\n            - dhcp_relay_policy: dhcp.uktme.cisco.com\n\n        - name: 10.0.4.0_24\n        # alias: internal-vrf-01\n        unknown_unicast: proxy\n        vrf: vrf-01\n        subnets:\n            - ip: 10.0.4.1/24\n            public: true\n            # private: false\n            shared: false\n            nd_ra_prefix: false\n        l3outs:\n            - demo.vrf-01-bgp-AS-65151\n        dhcp_labels:\n            - dhcp_relay_policy: dhcp.uktme.cisco.com\n\n        - name: 10.0.5.0_24\n        # alias: internal-vrf-01\n        unknown_unicast: proxy\n        vrf: vrf-01\n        subnets:\n            - ip: 10.0.5.1/24\n            public: true\n            # private: false\n            shared: false\n            nd_ra_prefix: false\n        l3outs:\n            - demo.vrf-01-bgp-AS-65151\n        dhcp_labels:\n            - dhcp_relay_policy: dhcp.uktme.cisco.com\n\n        - name: 10.0.6.0_24\n        # alias: internal-vrf-01\n        unknown_unicast: proxy\n        vrf: vrf-01\n        subnets:\n            - ip: 10.0.6.1/24\n            public: true\n            # private: false\n            shared: false\n            nd_ra_prefix: false\n        l3outs:\n            - demo.vrf-01-bgp-AS-65151\n        dhcp_labels:\n            - dhcp_relay_policy: dhcp.uktme.cisco.com\n\n        - name: 10.0.7.0_24\n        # alias: internal-vrf-01\n        unknown_unicast: proxy\n        vrf: vrf-01\n        subnets:\n            - ip: 10.0.7.1/24\n            public: true\n            # private: false\n            shared: false\n            nd_ra_prefix: false\n        l3outs:\n            - demo.vrf-01-bgp-AS-65151\n        dhcp_labels:\n            - dhcp_relay_policy: dhcp.uktme.cisco.com\n\n    application_profiles:\n        - name: 'network-segments'\n        description: EPGs provide the VLAN backing for application workloads\n        endpoint_groups:      \n            # - name: '10.237.100.0_24'\n            #   # alias: common.vrf-01\n            #   bridge_domain: '10.237.100.x_24'\n            #   vmware_vmm_domains:\n            #     - name: 'ucsc-c220m5-vds-01'\n            #       u_segmentation: true\n            #       deployment_immediacy: immediate\n            #       resolution_immediacy: immediate\n\n            - name: '10.0.1.0_24'\n            # alias: internal-vrf-01\n            bridge_domain: '10.0.1.0_24'\n            vmware_vmm_domains:\n                - name: 'hx-dev-01-vds-01'\n                # primary_vlan: 1243\n                # secondary_vlan: 1244  \n                # u_segmentation: true\n                deployment_immediacy: immediate\n                resolution_immediacy: immediate\n\n            - name: '10.0.2.0_24'\n            # alias: internal-vrf-01\n            bridge_domain: '10.0.2.0_24'\n            vmware_vmm_domains:\n                - name: 'hx-dev-01-vds-01'\n                # primary_vlan: 1245\n                # secondary_vlan: 1246  \n                # u_segmentation: true\n                deployment_immediacy: immediate\n                resolution_immediacy: immediate\n\n            - name: '10.0.3.0_24'\n            # alias: internal-vrf-01\n            bridge_domain: '10.0.3.0_24'\n            vmware_vmm_domains:\n                - name: 'hx-dev-01-vds-01'\n                # primary_vlan: 1247\n                # secondary_vlan: 1248 \n                # u_segmentation: true\n                deployment_immediacy: immediate\n                resolution_immediacy: immediate\n\n            - name: '10.0.4.0_24'\n            # alias: internal-vrf-01\n            bridge_domain: '10.0.4.0_24'\n            vmware_vmm_domains:\n                - name: 'hx-dev-01-vds-01'\n                # primary_vlan: 1249\n                # secondary_vlan: 1250 \n                # u_segmentation: true\n                deployment_immediacy: immediate\n                resolution_immediacy: immediate\n\n            - name: '10.0.5.0_24'\n            # alias: internal-vrf-01\n            bridge_domain: '10.0.5.0_24'\n            vmware_vmm_domains:\n                - name: 'hx-dev-01-vds-01'\n                # primary_vlan: 1251\n                # secondary_vlan: 1252\n                # u_segmentation: true\n                deployment_immediacy: immediate\n                resolution_immediacy: immediate\n\n            - name: '10.0.6.0_24'\n            # alias: internal-vrf-01\n            bridge_domain: '10.0.6.0_24'\n            vmware_vmm_domains:\n                - name: 'hx-dev-01-vds-01'\n                # primary_vlan: 1253\n                # secondary_vlan: 1254  \n                # u_segmentation: true\n                deployment_immediacy: immediate\n                resolution_immediacy: immediate\n\n            - name: '10.0.7.0_24'\n            # alias: internal-vrf-01\n            bridge_domain: '10.0.7.0_24'\n            vmware_vmm_domains:\n                - name: 'hx-dev-01-vds-01'\n                # primary_vlan: 1255\n                # secondary_vlan: 1256 \n                # u_segmentation: true\n                deployment_immediacy: immediate\n                resolution_immediacy: immediate \n</code></pre>"},{"location":"categories/random-stuff/html-colour-codes/","title":"Using","text":"<pre><code>&lt;span style=\"color:#000080\"&gt;Navy&lt;/span&gt;\n\n&lt;span style=\"background-color:#000000\"&gt;&lt;span style=\"color:#FFFFFF\"&gt;White&lt;/span&gt;&lt;/span&gt;\n</code></pre> Colour HEX Code RGB Code White #FFFFFF rgb(255, 255, 255) Silver #C0C0C0 rgb(192, 192, 192) Grey #808080 rgb(128, 128, 128) Black #000000 rgb(0, 0, 0) Red #FF0000 rgb(255, 0, 0) Maroon #800000 rgb(128, 0, 0) Yellow #FFFF00 rgb(255, 255, 0) Olive #808000 rgb(128, 128, 0) Lime #00FF00 rgb(0, 255, 0) Green #008000 rgb(0, 128, 0) Aqua #00FFFF rgb(0, 255, 255) Teal #008080 rgb(0, 128, 128) Blue #0000FF rgb(0, 0, 255) Navy #000080 rgb(0, 0, 128) Fuchsia #FF00FF rgb(255, 0, 255) Purple #800080 rgb(128, 0, 128) <p>White Silver Grey Black Red Maroon Yellow Olive Lime Green Aqua Teal Blue Navy Fuchsia Purple</p>"},{"location":"categories/random-stuff/html-colour-codes/#some-useful-links","title":"Some useful links","text":"<p>codecademy: using span https://www.codecademy.com/resources/docs/html/elements/span</p>"},{"location":"categories/random-stuff/mkdocs-testing/","title":"This is just somewhere to test out mkdocs functions","text":"<pre><code># Code block content\n</code></pre> <pre><code># Code block content\n</code></pre> <pre><code>&lt;div class=\"row\" style=\"display: table;margin: 0 auto\"&gt;\n    &lt;img src=\"./images/1.png\" width=\"800\" &gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"categories/random-stuff/mkdocs-testing/#the-server-script","title":"The server script","text":"`server.py` <pre><code>something here\n</code></pre>"}]}