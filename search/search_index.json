{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome...","text":"<p>If you've stumbled across this site it's probably because you've been looking for something ACI related, or you've seen one of my presentations from Cisco Live or some other event.</p> <p>I put this page together for a couple of reasons, firstly because I've pulled together so many best practices for different customers that I thought I should consolidate them in one place, and secondly because I sometimes forget how I've done things :)</p>"},{"location":"#a-little-about-me","title":"A little about me...","text":"<p>I've been at Cisco for longer than I can remember, I guess the ability to change roles and do different things is what's kept me here at Cisco. I'm based in the UK and currently work as a Global Solutions Architect in Cisco's Data Center Networking team, prior to working in the Global team I've worked for both the EMEA and UK Systems Engineering teams.</p> <p>Outside of work I love to travel and go diving whenever I get the chance.</p> <p>According to my kids I draw pictures for a job, which is partially true .... I do love a diagram...!</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>By way of a disclaimer, the opinions expressed here are very much my personal thoughts and opinions. The content is not checked, approved, or endorsed by Cisco.</p>"},{"location":"categories/aci/access-policies/","title":"Access Policy Configuration","text":"<p>Configuring interfaces on an ACI fabric can be very simple (if you know what you're doing), or a bit like driving a car, it can be challenging if you've never been taught properly. I've see many, many customers who have started off configuring things without a real plan in mind, and therein lies one of the most important things to remember when configuring ACI, and that is \"plan first, configure second\".</p> <p>Configuring an interface on an ACI Leaf switch is much like configuring an interface on a traditional switch, yes, there are a few other options that you wouldn't find on a traditional switch, and yes, to keep things interesting the developers decided to give objects some funny names, but once you get past that it's really quite simple.</p>"},{"location":"categories/aci/access-policies/#access-policy-building-blocks","title":"Access Policy Building Blocks","text":"<p>Before we get onto an actual example it's worth first understanding the building blocks that are ACI Access Policies - be prepared, there are quite a lot of them!</p> <p>Ok, the first thing to do is to navigate to \"Fabric &gt; Access Policies\", under the Access Policies you'll find a list of folders where you'll configure your parameters, and at the very top there is a Wizard that's been designed to help you through the configuration steps. </p> <p>I would strongly recommend that you never, ever, (ever) use the wizard...!! There a couple of reasons why I would say not to use the wizard, the first being if you use the wizard you will never really learn how to configure interfaces, and the second being that the wizard automatically creates all manner of weird names under the Access Policies.</p> <p>So what are all these policies?</p> <p>I'll start at the top and work down, I won't cover every policy else you'll be here forever. If your head starts hurting simply jump to the diagram and example below: </p> <ul> <li>Switches &gt; Leaf Switches &gt; Profiles: These profiles identify one or more physical switches. In our example a Leaf Switch Profile will map to a single switch</li> <li>Interfaces &gt; Leaf Interfaces &gt; Profiles: These are the logical representation of physical switches. In our example a Leaf Interface Profile will map 1:1 to a Leaf Switch Profile</li> <li>Interfaces &gt; Leaf Interfaces &gt; Profiles &gt; Access Port Selector: These are the actual interfaces on a given switch</li> <li>Interfaces &gt; Leaf Interfaces &gt; Policy Groups: These are a group of settings (an interface template) that will be applied to switch interfaces</li> <li>Policies &gt; Interfaces: These are the actual interface settings which are aggregated into an Interface Policy Group</li> <li>Policies &gt; Global &gt; AAEP: In a traditional switch this would be akin to \"switchport trunk allowed VLAN\" - VLANs are mapped to a Policy Group</li> <li>Domains (L2, L3, Physical, VMM): Domains define an environment where VLANs can be consumed. Think, these VLANs can only be used by this tenat</li> <li>Pools &gt; VLAN Pool: These are lists of one or more VLANs which can be allocated statically or dynamically</li> </ul> <p>Ok, if that's the theory, this is how our Access Policies desing would hang together if I were attaching some ESX hosts to my fabric using standard (non VPC interfaces):</p>"},{"location":"categories/aci/access-policies/#lets-build-this-out-step-by-step","title":"Let's build this out step by step...!","text":"<p>The best starting point (IMHO) is to always focus on the Policy Group / Interface Template (call it what you want - well, it's called a Policy Group), because this will be a template which you'll reuse multiple times to ensure that all the switch interfaces are configured in a consistent manner.</p> <p>To create an Interface Policy Group, navigate to Interfaces &gt; Leaf Interfaces &gt; Policy Groups. Once you're in the right place, create a new Policy Group with the name of the device that you're attaching to the network - in this case we're going to attach the default vSwitch-0 from our hosts, therefore we'll name the Policy Group \"esx-hosts-vSwitch-0\".</p> <p>When you create the Policy Group you'll quickly realise that you should have created some of the other objects before the Policy Group so that you could use them at this point. Not to worry, you can either create the objects at this point, or just save the empty policy group - we'll do the latter and just save the empty group.</p>"},{"location":"categories/aci/access-policies/#lets-start-again-at-the-bottom-and-work-our-way-up-the-object-model","title":"Let's start (again) at the bottom and work our way up the Object Model...!","text":"<p>We're going to keep our naming structure very (er) structured, everything will reflect the name of the Policy Group.</p> <p>We will create the following objects:</p> <ul> <li>A VLAN Pool that is type \"static\" with the VLANs that we want to use for our host connectivity on vSwitch-0</li> <li>A Physical Domain that could/would be used to control where the VLANs are used</li> <li>An AAEP that is going to \"switchport trunk\" allow the VLANs on an interface</li> <li>A number of Interface Policies which will define the characteristics of our interfaces e.g. cdp-enabled, mcp-enabled, port-local-vlans etc</li> </ul> <p>At each step we need to ensure that the relationship between our objects is in place, because if you have a break in the model the interface won't be configured correctly.</p>"},{"location":"categories/aci/access-policies/#now-lets-start-at-the-top-and-work-our-way-down-the-object-model","title":"Now let's start at the top and work our way down the Object Model...!","text":"<p>The next step will be to map our physical switches to the logical representation of our switches, in other words we will create a 1:1 mapping between our Leaf Switch Profile and our Leaf Interface Profile.</p> <p>To do this we will need to create the following objects:</p> <ul> <li>A Leaf Switch Profile this identifies a physical switch, i.e. leaf-101, leaf-102, etc</li> <li>A Leaf Interface Profile this will map our configured interfaces to our physical switches, i.e. leaf-101, leaf-102, etc</li> </ul>"},{"location":"categories/aci/access-policies/#lets-complete-the-object-model","title":"Let's complete the Object Model...!","text":"<p>The final thing we need to do is to select which interfaces we want to configure on a particular switch, to do this we will create the two remaining objects:</p> <ul> <li>An Access Port Selector is configured under the Leaf Interface Profile and is used to identify on or more interfaces that will be configured</li> <li>A Port Block is where you actually specify the interfaces that you want to configure i.e. eth1/1, eth 1/2, etc. You can add a unique interface description to each interface as you configure it, this will be displayed when you enter a \"show\" command on APIC such as <code>fabric 101 show interface status</code>, or directly on a leaf switch <code>show interface status</code></li> </ul>"},{"location":"categories/aci/access-policies/#that-seems-like-a-lot-of-steps-to-configure-an-interface","title":"That seems like a lot of steps to configure an interface...!","text":"<p>This is something that I've heard more than once, and it's true, there are a number of steps that need to be completed, and if we were only configuring a single interface on a single switch this would take some time. However, Data Centers come in all shapes and sizes, and there are always multiple switches - from a small Data Center of 10-20 switches, to a large Data Center with hundreds of switches. Whatever size Data Center you're building, the ability to have a consistent configuration across all your switches is critical.</p> <p>Once we've build out our Object Model for our vSwitch-0 configuration on our ESX hosts we can reuse the Policy Group across as many switches as there are in our Data Center, it's simply a case of creating an Access Port Selector with the required interfaces under the Leaf Interface Profile wherever you're attaching your hosts.</p>"},{"location":"categories/aci/access-policies/#summary","title":"Summary","text":"<p>Configuring interfaces on an ACI fabric is extremely flexible and scalable however (as hard as it is) you should really plan what you're going build before jumping in at the deep end and configuring things.</p>"},{"location":"categories/aci/common-tenant/","title":"Working with tenant common","text":"<p>The first thing to say about tenant common (rather than the \"common tenant\") is that objects which are created in tenant common can be used as a resource by any other (user) tenants. Typical examples of this would be when a \"user\" tenant contains EPGs and uses a Bridge Domain (and VRF) in tenant common. Another example would be when Contracts are defined in tenant common and consumed as resources in other (user) tenants.</p> <p>You can think of it that tenant common is \"above\" other teants as shown below.</p>"},{"location":"categories/aci/common-tenant/#security-considerations","title":"Security considerations","text":"<p>An important security consideration with tenant common is that it is extremely easy to map objects in \"user\" tenants to resources in tenant common by mistake. </p> <p>To explain why this could happen, lets take an example configuration from our tenant <code>demo-01</code>.</p> <p>Inside tenant <code>demo-01</code> there is  a single VRF <code>vrf-01</code>, attached to the VRF are various Bridge Domains with their associated SVIs. The VRF in tenant <code>demo:01</code> would be referred to as <code>demo-01:vrf-01</code>.</p> <p>If there is a VRF in tenant common with the same name (<code>vrf-01</code>) it would be relatively easy to attach a Bridge Domain in the \"user\" tenant to <code>vrf-01</code> in tenant common by mistake using the GUI. </p> <p>Whilst making GUI errors can be avoided there is a bigger security concern around the naming of objects. If <code>demo-01:vrf-01</code> was deleted all the objects referencing <code>vrf-01</code> would automatically bind to <code>common:vrf-01</code> as the binding of objects uses the object name not the object dn.</p>"},{"location":"categories/aci/common-tenant/#looking-at-the-code","title":"Looking at the code","text":"<p>In the first block of code (fvBD) the distinguished name, or the path to the Bridge Domain is <code>uni/tn-demo/BD-10.192.168.150.0_24</code>. The APIC controller is explicitly told how to find and map the Bridge Domain.</p> <p>The second block of code (fvSubnet) is a child of fvBD and its attributes include the Default Gateway  (<code>192.168.150.1/24</code>), and a flag (<code>scope</code>) to control whether the subnet is advertised or not.</p> <p>The third block of code (fvRsCtx) is another child of fvBD and it defines which VRF (<code>tnFvCtxName</code>) the Bridge Domain should be bound to. The APIC controller is told to bind to vrf-01, however critically there is no reference as to the path to vrf-01, i.e. the VRF is referenced by its actual name, and not its distinguished name.</p> VRF resolution<pre><code>\"fvBD\": {\n    \"attributes\": {\n        \"arpFlood\": \"yes\",\n        \"descr\": \"\",\n        \"dn\": \"uni/tn-demo/BD-10.192.168.150.0_24\",\n        \"limitIpLearnToSubnets\": \"yes\",\n        \"mac\": \"00:22:BD:F8:19:FF\",\n        \"mcastARPDrop\": \"yes\",\n        \"mcastAllow\": \"no\",\n        \"multiDstPktAct\": \"bd-flood\",\n        \"name\": \"192.168.150.0_24\",\n        \"unicastRoute\": \"yes\",\n        \"unkMacUcastAct\": \"proxy\",\n        \"unkMcastAct\": \"flood\",\n        \"userdom\": \":all:mgmt:common:\"\n    },\n    \"children\": [\n        {\n            \"fvSubnet\": {\n                \"attributes\": {\n                    \"descr\": \"\",\n                    \"ip\": \"192.168.150.1/24\",\n                    \"ipDPLearning\": \"enabled\",\n                    \"preferred\": \"no\",\n                    \"scope\": \"private\",\n                    \"userdom\": \":all:mgmt:common:\"\n                }\n            }\n        },\n        {\n            \"fvRsCtx\": {\n                \"attributes\": {\n                    \"tnFvCtxName\": \"vrf-01\",\n                    \"userdom\": \"all\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"categories/aci/common-tenant/#recommendation","title":"Recommendation","text":"<p>A general recommendation would be to prefix objects in tenant common to prevent unexpected binding of resources:</p> object name vrf: common.vrf-01 bd: common.vrf-01_10.237.100.0_24 l3out: common.vrf-01-ospf-area-0.0.0.1 contract: common.permit-tcp-src-any-dst-80 filter: common.tcp-src-any-dst-80 policy: common.dhcp-server device: common.ftd-01"},{"location":"categories/aci/getting-started/","title":"Getting started with ACI","text":"<p>How do I get started with ACI?</p> <p>If I've heard this question once, I've heard it many (many) times from both customers and partners, and as boring as it sounds you really need to have plan before you start configuring \"stuff\" on your fabric.</p> <p>Very broadly you need to have a plan in a few areas:</p> <ul> <li> <p>you'll need to consider how you are going to configure the interfaces on your switches, and by this I don't mean whether you're opting for lldp over cdp, what I mean is that you need to understand how interface configuration actually works, and how this will work at scale in your environment</p> </li> <li> <p>you'll need to consider how you are going to configure your tenants, and therefore how you're going to connect (via L2/L3) to the workloads that you're hosting on the fabric</p> </li> <li> <p>you'll need to consider how you are actually going to do the configuration - are you going to use the GUI, the CLI, or the API? There is no right or wrong option, most likely you'll start off using the GUI to configure things, and then you'll gravitate towards using the API, maybe with Postman, Ansible, Terraform, or Nexus as Code</p> </li> </ul> <p>Ok, so what will happen if you don't start out with a plan?</p> <p>Well much like anything else in life, whether you're configuring a standalone switch or router, or whether you're building a house, if you don't have some kind of a plan you'll most likely end up in a mess.</p> <p>As a best practice, I always strongly suggest that you download the APIC simulator so that you can test your configuration/code in a safe place, then test you configuration/code on a test network, and then (finally) when you're 100% happy, you put your configuration/code into production.</p>"},{"location":"categories/aci/route-leaking-epgs/","title":"Configuring BGP from an external router to ACI","text":"<p>This is the basic configuration that I put together to peer a csr1kv to ACI such that the csr1kv provides routing between \"shared-services\" tenant running OSPF and a tenant running BGP.</p>"},{"location":"categories/aci/route-leaking-epgs/#basic-configuration","title":"Basic configuration","text":"<p>Configure a dedicated VRF for management traffic</p> <pre><code>vrf definition management\n\n address-family ipv4\n exit-address-family\n\ninterface GigabitEthernet1\n vrf forwarding management\n ip address 10.237.100.127 255.255.255.0\n negotiation auto\n no mop enabled\n no mop sysid\n\nip route vrf management 0.0.0.0 0.0.0.0 10.237.100.1\n</code></pre> <p>Configure OSPF to peer with upstream routers</p> <pre><code>interface GigabitEthernet2\n ip address 10.237.99.52 255.255.255.248\n negotiation auto\n no mop enabled\n no mop sysid\n\nrouter ospf 1\n network 10.237.99.48 0.0.0.7 area 0.0.0.1\n</code></pre> <p>Configure BGP on the upstream router to peer with ACI fabric</p> <pre><code>interface GigabitEthernet5\n ip address 10.237.99.60 255.255.255.248\n negotiation auto\n no mop enabled\n no mop sysid\n\nrouter bgp 65051\n bgp log-neighbor-changes\n neighbor 10.237.99.57 remote-as 65151\n neighbor 10.237.99.58 remote-as 65151\n\n address-family ipv4\n  network 0.0.0.0\n  network 10.237.99.56 mask 255.255.255.248\n  redistribute ospf 1 match external 2\n  neighbor 10.237.99.57 activate\n  neighbor 10.237.99.58 activate\n exit-address-family\n</code></pre> <p>In this example I've used the <code>network 0.0.0.0</code> statement which will look in the routing table for a default route and then advertise in BGP. </p> <p>Note: If a default route has been learned as an external route from OSPF it will not be redistributed into BGP using <code>redistribute ospf 1 match external 2</code>.</p> <p>Another example would be to use <code>default-information originate</code> with <code>neighbor x.x.x.x default-originate</code> this would always create a default route and advertise it via BGP to the specified neighbours.</p> <pre><code>router bgp 65051\n bgp log-neighbor-changes\n neighbor 10.237.99.57 remote-as 65151\n neighbor 10.237.99.58 remote-as 65151\n\n address-family ipv4\n  network 10.237.99.56 mask 255.255.255.248\n  neighbor 10.237.99.57 activate\n  neighbor 10.237.99.57 default-originate\n  neighbor 10.237.99.58 activate\n  neighbor 10.237.99.58 default-originate\n  default-information originate\n exit-address-family\n</code></pre>"},{"location":"categories/aci/route-leaking-epgs/#part-2-creating-a-tenant-specific-vrf-on-the-upstream-router","title":"Part 2 - Creating a tenant specific VRF on the upstream router","text":"<p>Define a new VRF:</p> <pre><code>vrf definition tn-demo-05\n rd 65005:5\n route-target export 65005:5\n route-target import 65005:5\n\n address-family ipv4\n exit-address-family\n ```\n\nAdd interface to the VRF and configure BGP:\n\n```console\ninterface GigabitEthernet5\n vrf forwarding tn-demo-05\n ip address 10.237.99.60 255.255.255.248\n negotiation auto\n no mop enabled\n no mop sysid\n\nrouter bgp 65051\n bgp log-neighbor-changes\n\n address-family ipv4 vrf tn-demo-05\n  network 0.0.0.0\n  network 10.237.99.56 mask 255.255.255.248\n  neighbor 10.237.99.57 remote-as 65151\n  neighbor 10.237.99.57 activate\n  neighbor 10.237.99.58 remote-as 65151\n  neighbor 10.237.99.58 activate\n exit-address-family\n</code></pre>"},{"location":"categories/aci/route-leaking-epgs/#useful-commands","title":"Useful commands","text":"<p>show ip bgp all summary show ip route vrf tn-demo-05 show ip bgp vpnv4 rd 65005:05 show ip bgp vpnv4 vrf tn-demo-05 show bgp vrf tn-demo-05 neighbors</p> <p>need to redistribute ospf to bgp vrf</p>"},{"location":"categories/aci/route-leaking-epgs/#create-default-vrf-on-csr1kv-02","title":"create default VRF on csr1kv-02","text":"<p>vrf definition default</p> <p>address-family ipv4  exit-address-family</p> <p>interface GigabitEthernet2  vrf forwarding default  ip address 10.237.99.52 255.255.255.248  negotiation auto  no mop enabled  no mop sysid</p> <p>router ospf 1 vrf default  network 10.237.99.48 0.0.0.7 area 0.0.0.1</p>"},{"location":"categories/aci/route-leaking-epgs/#working-configuration-with-default-vrf","title":"Working configuration with default VRF","text":"<p>vrf definition default  rd 65000:100  route-target export 65000:100  route-target import 65000:100</p> <p>address-family ipv4  exit-address-family</p> <p>interface GigabitEthernet2  vrf forwarding default  ip address 10.237.99.52 255.255.255.248  negotiation auto  no mop enabled  no mop sysid</p> <p>interface GigabitEthernet5  vrf forwarding default  ip address 10.237.99.60 255.255.255.248  negotiation auto  no mop enabled  no mop sysid router ospf 1 vrf default  capability vrf-lite  redistribute bgp 65051  network 10.237.99.48 0.0.0.7 area 0.0.0.1</p> <p>router bgp 65051  bgp log-neighbor-changes</p> <p>address-family ipv4 vrf default   network 0.0.0.0   network 10.237.99.56 mask 255.255.255.248   redistribute ospf 1 match external 2   neighbor 10.237.99.57 remote-as 65151   neighbor 10.237.99.57 activate   neighbor 10.237.99.58 remote-as 65151   neighbor 10.237.99.58 activate  exit-address-family</p>"},{"location":"categories/aci/route-leaking-epgs/#working-configuration-with-multiple-vrfs","title":"Working configuration with multiple VRFs","text":"<p>vrf definition default  rd 65000:100  route-target export 65000:100  route-target import 65000:100  route-target import 65005:5  !  address-family ipv4  exit-address-family ! vrf definition management  !  address-family ipv4  exit-address-family ! vrf definition tn-demo-05  rd 65005:5  route-target export 65005:5  route-target import 65005:5  route-target import 65000:100  !  address-family ipv4  exit-address-family</p> <p>interface GigabitEthernet2  vrf forwarding default  ip address 10.237.99.52 255.255.255.248  negotiation auto  no mop enabled  no mop sysid</p> <p>interface GigabitEthernet5  vrf forwarding tn-demo-05  ip address 10.237.99.60 255.255.255.248  negotiation auto  no mop enabled  no mop sysid</p> <p>router ospf 1 vrf default  capability vrf-lite  network 10.237.99.48 0.0.0.7 area 0.0.0.1 ! router bgp 65051  bgp log-neighbor-changes  !  address-family ipv4 vrf default   redistribute connected   redistribute ospf 1 match internal external 1 external 2  exit-address-family  !  address-family ipv4 vrf tn-demo-05   network 0.0.0.0   network 10.237.99.56 mask 255.255.255.248   neighbor 10.237.99.57 remote-as 65151   neighbor 10.237.99.57 activate   neighbor 10.237.99.58 remote-as 65151   neighbor 10.237.99.58 activate</p>"},{"location":"categories/aci/route-leaking-esgs/","title":"Route Leaking with ESGs","text":""},{"location":"categories/aci/tenant-design-options/","title":"Designing your tenants","text":""},{"location":"categories/aci/vzAny/","title":"Working with vzAny","text":"<p>What actually is vzAny?</p> <p>In a nutshell vzAny is simply an EPG, but it's an EPG with a crucial difference - and that is that any contract which is applied to vzAny is applied to all EPGs, ESGs, and extEPGs within a given VRF.</p> <p>To put it another way, when vzAny provides a contract it means that all EPGs, ESGs, and extEPGs are providers of the same contract. When vzAny consuumes a contract it means that all EPGs, ESGs, and extEPGs are consumers of the same contract.</p> <p>It's also worth knowing that vzAny uses a pcTag/Class ID of zero (you can see this in the zoning rules), and it cannot be a contract provider in a shared services design.</p>"},{"location":"categories/aci/vzAny/#a-sledgehammer-to-crack-a-nut","title":"A sledgehammer to crack a nut","text":"<p>vzAny is often used to enable open communication within a VRF by providing and consuming the default contract from tenant common. This is an absolutely acceptable design, however it does open a potential security hole as vzAny will also apply to any external EPGs.</p>"},{"location":"categories/aci/vzAny/#vzany-in-a-single-tenant","title":"vzAny in a single tenant","text":"<p>If you provide and consume the default (permit-any) contract on vzAny it will permit all traffic between all EPGs, ESGs, and extEPGs within the VRF as shown below. </p> <p>The potential issue is that, depending on the subnet scope on the external EPG, you will have also allowed traffic from any remote subnet to any workload on the fabric which may or may not be the intended outcome.</p>"},{"location":"categories/aci/vzAny/#vzany-in-a-single-tenant-with-insideoutside-vrfs","title":"vzAny in a single tenant with inside/outside VRFs","text":"<p>To mitigate the potential security risk of opening connectivity to all workloads on the VRF you could simply create 2x VRFs, one that is external facing, and one that is internal facing. Each tenant would have their own dedicated L3out and you would simply need to enable route leaking between the external and internal VRFs, and apply contracts from extEPGs to any internal EPGs/ESGs.</p>"},{"location":"categories/aci/vzAny/#vzany-in-a-shared-services-model-with-split-tenants-and-vrfs","title":"vzAny in a shared services model with split tenants and VRFs","text":"<p>The final (and my preferred) option to mitigate the security risk that vzAny could pose is to create a Shared L3Out in a dedicated shared-services tenant. The shared L3out would provide inbound/outbound routing for all tenants on the fabric, and just like the previous example, you would need to enable route leaking between the external shared-services VRF, and the internal tenant VRF.</p> <p>You will still need to apply contracts from the extEPGs in the shared services tenant to the required EPGs/ESGs in the \"user\" tenant, however what is slightly different in a shared services design is that contracts either need to be provisioned in tenant common, or (and once again, my preferred option) the contract should be created in the provider tenant and exported to the consumer tenant where the contract is consumed as a contract interface.</p>"},{"location":"categories/aci/vzAny/#summary","title":"Summary","text":"<p>The really great thing about vzAny is that it allows you to easily open up communication within a VRF. On the other hand, the really bad thing about vzAny is that it opens up communication within a VRF which might present a potential security risk.</p> <p>I like to use vzAny to provide access to shared resources that need to be accessed by all endpoints in a VRF. For example if you have an EPG/ESG which provides your core services you could create a contract <code>permit-to-core-services</code> which is provided by your core services EPG/ESG and consumed by vzAny.</p> <p>With the contract in place all EPGs/ESGs within the VRF also inplicitedly become consumers of the core services EPG.</p> <p>I typically avoid placing services in tenant common unless I've got a really (really) good reason for putting something in tenant common - have a look at working with tenant common for more details.</p>"},{"location":"categories/random-stuff/html-colour-codes/","title":"HTML Colour Codes","text":"Colour HEX Code RGB Code White #FFFFFF rgb(255, 255, 255) Silver #C0C0C0 rgb(192, 192, 192) Gray #808080 rgb(128, 128, 128) Black #000000 rgb(0, 0, 0) Red #FF0000 rgb(255, 0, 0) Maroon #800000 rgb(128, 0, 0) Yellow #FFFF00 rgb(255, 255, 0) Olive #808000 rgb(128, 128, 0) Lime #00FF00 rgb(0, 255, 0) Green #008000 rgb(0, 128, 0) Aqua #00FFFF rgb(0, 255, 255) Teal #008080 rgb(0, 128, 128) Blue #0000FF rgb(0, 0, 255) Navy #000080 rgb(0, 0, 128) Fuchsia #FF00FF rgb(255, 0, 255) Purple #800080 rgb(128, 0, 128)"},{"location":"categories/random-stuff/mkdocs-testing/","title":"This is just somewhere to test out mkdocs functions","text":"<pre><code># Code block content\n</code></pre> <pre><code># Code block content\n</code></pre> <pre><code>&lt;div class=\"row\" style=\"display: table;margin: 0 auto\"&gt;\n    &lt;img src=\"./images/1.png\" width=\"800\" &gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"categories/random-stuff/mkdocs-testing/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"categories/random-stuff/mkdocs-testing/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"categories/random-stuff/route-leaking/","title":"Configuring route leaking between OSPF and BGP","text":"<p>These are the basic configuration steps that I put together to peer a csr1kv to ACI such that the csr1kv provides routing between \"shared-services\" tenant running OSPF and a tenant running BGP.</p> <p>The steps below focus only on the csr1kv configuration.</p>"},{"location":"categories/random-stuff/route-leaking/#part-1-basic-configuration","title":"Part 1 - Basic configuration","text":"<p>I added a dedicated management VRF on the csr1kv just so that I didn't cut my legs off when playing with different configuration options.</p> Management VRF<pre><code>vrf definition management\n\n address-family ipv4\n exit-address-family\n\ninterface GigabitEthernet1\n vrf forwarding management\n ip address 10.237.100.127 255.255.255.0\n negotiation auto\n no mop enabled\n no mop sysid\n\nip route vrf management 0.0.0.0 0.0.0.0 10.237.100.1\n</code></pre> <p>I then configured OSPF on the csr1kv to peer with my upstream routers</p> <p>In this case the upstream routers are my ACI Border Leafs and I'm peering OSPF with a L3out SVI in my shared-services tenant (shared-services:vrf-01).</p> OSPF Configuration<pre><code>interface GigabitEthernet2\n ip address 10.237.99.52 255.255.255.248\n negotiation auto\n no mop enabled\n no mop sysid\n\nrouter ospf 1\n network 10.237.99.48 0.0.0.7 area 0.0.0.1\n</code></pre> <p>At this point my OSPF neighbours we up and working and I was receiving routes.</p> OSPF up and running<pre><code>csr1kv-02#show ip ospf neighbor\n\nNeighbor ID     Pri   State           Dead Time   Address         Interface\n101.2.1.1         1   FULL/BDR        00:00:34    10.237.99.49    GigabitEthernet2\n102.2.1.1         1   FULL/DR         00:00:33    10.237.99.50    GigabitEthernet2\n\ncsr1kv-02#sh ip route\n\nRouting Table: \n\nGateway of last resort is 10.237.99.50 to network 0.0.0.0\n\nO*E2    0.0.0.0/0   [110/1] via 10.237.99.50, 21:44:43, GigabitEthernet2\n                    [110/1] via 10.237.99.49, 21:44:43, GigabitEthernet2\n        10.0.0.0/8 is variably subnetted, 78 subnets, 9 masks\nO E2    10.0.1.0/24 [110/20] via 10.237.99.50, 21:44:43, GigabitEthernet2\n                    [110/20] via 10.237.99.49, 21:44:43, GigabitEthernet2\nO E2    10.0.2.0/24 [110/20] via 10.237.99.50, 21:44:43, GigabitEthernet2\n                    [110/20] via 10.237.99.49, 21:44:43, GigabitEthernet2\nO E2    10.0.3.0/24 [110/20] via 10.237.99.50, 21:44:43, GigabitEthernet2\n                    [110/20] via 10.237.99.49, 21:44:43, GigabitEthernet2\nO E2    10.0.4.0/24 [110/20] via 10.237.99.50, 21:44:43, GigabitEthernet2\n\n&lt;output truncated&gt;\n</code></pre> <p>The next thing to configure was BGP peering from the csr1kv to the L3out SVI in my demo-05 tenant (demo-05:vrf-01) and redistribute the routes from OSPF.</p> BGP Configuration<pre><code>interface GigabitEthernet5\n ip address 10.237.99.60 255.255.255.248\n negotiation auto\n no mop enabled\n no mop sysid\n\nrouter bgp 65051\n bgp log-neighbor-changes\n neighbor 10.237.99.57 remote-as 65151\n neighbor 10.237.99.58 remote-as 65151\n\n address-family ipv4\n  network 0.0.0.0\n  network 10.237.99.56 mask 255.255.255.248\n  redistribute ospf 1 match external 2\n  neighbor 10.237.99.57 activate\n  neighbor 10.237.99.58 activate\n exit-address-family\n</code></pre> <p>In this example I used the <code>network 0.0.0.0</code> statement which will look in the routing table for a default route and then advertise in BGP. </p> <p>Note: If a default route has been learned as an external route from OSPF it will not be redistributed into BGP using <code>redistribute ospf 1 match external 2</code>.</p> <p>Another way to advertise a default route would be to use <code>default-information originate</code> with <code>neighbor x.x.x.x default-originate</code> this would always create a default route and advertise it via BGP to the specified neighbours.</p> <pre><code>router bgp 65051\n bgp log-neighbor-changes\n neighbor 10.237.99.57 remote-as 65151\n neighbor 10.237.99.58 remote-as 65151\n\n address-family ipv4\n  network 10.237.99.56 mask 255.255.255.248\n  neighbor 10.237.99.57 activate\n  neighbor 10.237.99.57 default-originate\n  neighbor 10.237.99.58 activate\n  neighbor 10.237.99.58 default-originate\n  default-information originate\n exit-address-family\n</code></pre>"},{"location":"categories/random-stuff/route-leaking/#need-to-add-redistribution-from-bgp-back-to-ospf","title":"Need to add redistribution from BGP back to OSPF","text":"<p>At this point my BGP neighbours we up and working and I was receiving routes.</p> BGP up and running<pre><code>csr1kv-02#show ip ospf neighbor\n</code></pre>"},{"location":"categories/random-stuff/route-leaking/#part-2-creating-a-tenant-specific-vrf-on-the-upstream-router","title":"Part 2 - Creating a Tenant specific VRF on the upstream router","text":"<p>Once everything was working in the global routing table I created a dedicated Tenant VRF on the csr1kv so that routes from different ACI tenants would remain seperated.</p> <p>The first step was to define a new default VRF and a new Tenant specific VRF:</p> VRF definitions<pre><code>vrf definition default\n rd 65000:100\n route-target export 65000:100\n route-target import 65000:100\n route-target import 65005:5\n\n address-family ipv4\n exit-address-family\n\nvrf definition tn-demo-05\n rd 65005:5\n route-target export 65005:5\n route-target import 65005:5\n route-target import 65000:100\n\n address-family ipv4\n exit-address-family\n</code></pre> <p>Then I configured the interfaces:</p> Interface configuration<pre><code>interface GigabitEthernet2\n vrf forwarding default\n ip address 10.237.99.52 255.255.255.248\n negotiation auto\n no mop enabled\n no mop sysid\n\ninterface GigabitEthernet5\n vrf forwarding tn-demo-05\n ip address 10.237.99.60 255.255.255.248\n negotiation auto\n no mop enabled\n no mop sysid\n</code></pre> <p>The final step was to configure the routing processes:</p> Configure the routing processes<pre><code>router ospf 1 vrf default\n capability vrf-lite\n network 10.237.99.48 0.0.0.7 area 0.0.0.1\n\nrouter bgp 65051\n bgp log-neighbor-changes\n\n address-family ipv4 vrf default\n  redistribute connected\n  redistribute ospf 1 match internal external 2\n exit-address-family\n\n address-family ipv4 vrf tn-demo-05\n  network 0.0.0.0\n  network 10.237.99.56 mask 255.255.255.248\n  neighbor 10.237.99.57 remote-as 65151\n  neighbor 10.237.99.57 activate\n  neighbor 10.237.99.58 remote-as 65151\n  neighbor 10.237.99.58 activate\n</code></pre>"}]}